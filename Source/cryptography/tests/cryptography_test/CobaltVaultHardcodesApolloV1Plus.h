/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2020 Metrological
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 #pragma once
 
 #include <map>
 #include <utility>

// all property certs values are equal: libertyglobal-2023-apollov1plus in that case
static uint8_t prop_cert[] = {
    0x6c, 0x69, 0x62, 0x65, 0x72, 0x74, 0x79, 0x67,
    0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x32, 0x30,
    0x32, 0x33, 0x2d, 0x61, 0x70, 0x6f, 0x6c, 0x6c,
    0x6f, 0x76, 0x31, 0x70, 0x6c, 0x75, 0x73};

// captured, are equal on each CPE instance and same model, input data is 100 * 0x00 bytes array
static uint8_t sign_val_0[32] =
{
    0xc7, 0x18, 0x76, 0xe7, 0x8a, 0x30, 0x01, 0x8c,
    0x3b, 0x60, 0x70, 0xd0, 0x6f, 0xf3, 0x1c, 0xe4,
    0x49, 0xfe, 0x66, 0x93, 0x37, 0x6b, 0x42, 0x49,
    0x09, 0xc7, 0x32, 0x88, 0x70, 0xbf, 0x40, 0x8d
};

static uint8_t sign_val_1[32] =
{
    0x88, 0x17, 0x2d, 0x36, 0xc2, 0xe3, 0xfc, 0x08,
    0x78, 0xeb, 0x4f, 0x03, 0xc4, 0xdc, 0xf5, 0x67,
    0xb0, 0x1d, 0xa1, 0x0f, 0x5a, 0xe4, 0xb2, 0x9c,
    0x5b, 0xb8, 0xb5, 0x50, 0x81, 0x6a, 0x80, 0xac
};

static uint8_t sign_val_2[32] =
{
    0x7f, 0xa1, 0xf1, 0x0f, 0x7e, 0x13, 0xd8, 0xa9,
    0x5e, 0x50, 0x65, 0x01, 0x7f, 0x9c, 0x49, 0x08,
    0x62, 0x4d, 0x53, 0xd6, 0xcb, 0x51, 0x47, 0x12,
    0x3e, 0x50, 0x38, 0x29, 0x5f, 0xb9, 0x21, 0x55
};

static std::map<uint8_t, std::pair<uint32_t, uint8_t *>> PROPERTY_CERTS =
{
    {0, {sizeof(prop_cert), prop_cert} },
    {1, {sizeof(prop_cert), prop_cert} },
    {2, {sizeof(prop_cert), prop_cert} }
};

static std::map<uint8_t, uint8_t *> SIGN_VALUES =
{
    {0, sign_val_0 },
    {1, sign_val_1 },
    {2, sign_val_2 }
};
